@page "/login"
@rendermode InteractiveServer
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor

@attribute [Authorize]

<PageTitle>Connexion</PageTitle>

<h1>Connexion</h1>

@if (user?.Identity?.IsAuthenticated ?? false)
{

    <button class="btn btn-danger mt-3" @onclick="Logout">Se déconnecter</button>
    <br />
    <br />

    <div class="alert alert-success">
        <strong>Connecté en tant que : @user?.Claims?.FirstOrDefault(p => p.Type == "name")?.Value</strong>
    </div>

    <h3>Revendications (Claims)</h3>
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Type</th>
                <th>Valeur</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var claim in user!.Claims)
            {
                <tr>
                    <td>@claim.Type</td>
                    <td>@claim.Value</td>
                </tr>
            }
        </tbody>
    </table>

    <h3>Cookies d'authentification</h3>
    @if (authCookies.Count == 0)
    {
        <div class="text-danger">Aucun cookie d'authentification détecté.</div>
    }
    else
    {
        <ul>
            @foreach (var cookie in authCookies)
            {
                <li><strong>@cookie.Key</strong></li>
            }
        </ul>
    }

    <h3>Détails du ticket d’authentification</h3>
    @if (!string.IsNullOrEmpty(authTicketDump))
    {
        <pre style="white-space: pre-wrap; font-family: monospace;">@authTicketDump</pre>
    }
    else
    {
        <div class="text-warning">Ticket d’authentification non disponible ou invalide.</div>
    }
}
else
{
    <div class="alert alert-warning">
        <strong>Utilisateur non connecté.</strong>
    </div>
}

@code {
    private ClaimsPrincipal? user;
    private Dictionary<string, string> authCookies = new();
    private string authTicketDump = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        // Extraction des cookies liés à l'auth
        var cookies = HttpContextAccessor.HttpContext?.Request.Cookies;
        if (cookies != null)
        {
            foreach (var cookie in cookies)
            {
                if (cookie.Key.Contains("Auth") || cookie.Key.Contains(".AspNetCore") || cookie.Key.Contains("oidc"))
                {
                    authCookies[cookie.Key] = cookie.Value;
                }
            }
        }
    }

    private void Logout()
    {
        Navigation.NavigateTo("/logout");
    }
}
